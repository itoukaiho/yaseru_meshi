<h2 class="text-center my-4 text-primary fw-bold">
  <i class="bi bi-geo-alt-fill"></i> 現在地と周辺の痩せメシ店舗
</h2>

<div class="d-flex justify-content-center mb-3">
  <div class="input-group" style="max-width: 400px;">
    <span class="input-group-text bg-white">
      <i class="bi bi-search"></i>
    </span>
    <input id="placeSearchInput" type="text" class="form-control" placeholder="例: サブウェイ、カフェ">
  </div>
</div>

<div id="map" class="rounded shadow" style="height: 500px;"></div>

<script async defer
  src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_API_KEY'] %>&libraries=places&callback=initMap">
</script>

<script>
  let map, userLocation;
  let postMarkers = [];
  let searchMarkers = [];

  function getDistanceKm(lat1, lng1, lat2, lng2) {
    const R = 6371;
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLng = (lng2 - lng1) * Math.PI / 180;
    const a =
      Math.sin(dLat / 2) ** 2 +
      Math.cos(lat1 * Math.PI / 180) *
      Math.cos(lat2 * Math.PI / 180) *
      Math.sin(dLng / 2) ** 2;
    return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  }

  function initMap() {
    navigator.geolocation.getCurrentPosition(function (position) {
      userLocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };

      map = new google.maps.Map(document.getElementById('map'), {
        zoom: 14,
        center: userLocation,
        styles: [ /* おしゃれなカラーテーマ例 */
          { "featureType": "poi", "stylers": [{ "visibility": "off" }] },
          { "featureType": "transit", "stylers": [{ "visibility": "off" }] }
        ]
      });

      new google.maps.Marker({
        position: userLocation,
        map: map,
        title: "現在地",
        icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
      });

      renderPostMarkers();
      initPlaceSearch();
    });
  }

  function renderPostMarkers() {
    postMarkers.forEach(marker => marker.setMap(null));
    postMarkers = [];

    const posts = <%= raw @posts.map { |p| {
      latitude: p.latitude,
      longitude: p.longitude,
      title: "#{p.title}（#{p.store}）"
    } }.to_json %>;

    posts.forEach(post => {
      if (!post.latitude || !post.longitude) return;

      const distance = getDistanceKm(userLocation.lat, userLocation.lng, post.latitude, post.longitude);
      if (distance <= 1) {
        const marker = new google.maps.Marker({
          position: { lat: post.latitude, lng: post.longitude },
          map: map,
          title: post.title,
          icon: 'https://maps.google.com/mapfiles/ms/icons/red-dot.png'
        });
        postMarkers.push(marker);
      }
    });
  }

  function initPlaceSearch() {
    const input = document.getElementById("placeSearchInput");
    const searchBox = new google.maps.places.SearchBox(input);

    map.addListener("bounds_changed", () => {
      searchBox.setBounds(map.getBounds());
    });

    searchBox.addListener("places_changed", () => {
      const places = searchBox.getPlaces();
      if (!places || places.length === 0) return;

      searchMarkers.forEach(marker => marker.setMap(null));
      searchMarkers = [];

      const bounds = new google.maps.LatLngBounds();
      places.forEach(place => {
        if (!place.geometry || !place.geometry.location) return;

        const marker = new google.maps.Marker({
          map: map,
          title: place.name,
          position: place.geometry.location,
          icon: 'https://maps.google.com/mapfiles/ms/icons/orange-dot.png'
        });
        searchMarkers.push(marker);
        bounds.extend(place.geometry.location);
      });

      map.fitBounds(bounds);
    });
  }
</script>
